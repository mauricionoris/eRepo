//// Generated by CoffeeScript 1.10.0
//(function() {
//  var lti, should;
//
//  should = require('should');
//
//  lti = require('../lti');
//
//  describe('LTI.Provider', function() {
//    before((function(_this) {
//      return function() {
//        return _this.lti = lti;
//      };
//    })(this));
//    describe('Initialization', (function(_this) {
//      return function() {
//        it('should accept (consumer_key, consumer_secret)', function() {
//          var consumer_key, consumer_secret, provider, sig;
//          sig = new (require('../lib/hmac-sha1'));
//          consumer_key = '10204';
//          consumer_secret = 'secret-shhh';
//          provider = new _this.lti.Provider(consumer_key, consumer_secret);
//          provider.should.be.an.instanceOf(Object);
//          provider.consumer_key.should.equal(consumer_key);
//          provider.consumer_secret.should.equal(consumer_secret);
//          return provider.signer.toString().should.equal(sig.toString());
//        });
//        it('should accept (consumer_key, consumer_secret, nonceStore, sig)', function() {
//          var provider, sig;
//          sig = {
//            me: 3,
//            you: 1,
//            total: 4
//          };
//          provider = new _this.lti.Provider('10204', 'secret-shhh', void 0, sig);
//          return provider.signer.should.equal(sig);
//        });
//        it('should accept (consumer_key, consumer_secret, nonceStore, sig)', function() {
//          var nonceStore, provider;
//          nonceStore = {
//            isNonceStore: function() {
//              return true;
//            },
//            isNew: function() {},
//            setUsed: function() {}
//          };
//          provider = new _this.lti.Provider('10204', 'secret-shhh', nonceStore);
//          return provider.nonceStore.should.equal(nonceStore);
//        });
//        return it('should throw an error if no consumer_key or consumer_secret', function() {
//          (function() {
//            var provider;
//            return provider = new _this.lti.Provider();
//          }).should["throw"](lti.Errors.ConsumerError);
//          return (function() {
//            var provider;
//            return provider = new _this.lti.Provider('consumer-key');
//          }).should["throw"](lti.Errors.ConsumerError);
//        });
//      };
//    })(this));
//    describe('Structure', (function(_this) {
//      return function() {
//        before(function() {
//          return _this.provider = new _this.lti.Provider('key', 'secret');
//        });
//        return it('should have valid_request method', function() {
//          should.exist(_this.provider.valid_request);
//          return _this.provider.valid_request.should.be.a.Function;
//        });
//      };
//    })(this));
//    describe('.valid_request method', (function(_this) {
//      return function() {
//        before(function() {
//          _this.provider = new _this.lti.Provider('key', 'secret');
//          return _this.signer = _this.provider.signer;
//        });
//        it('should return false if missing lti_message_type', function(done) {
//          var req_missing_type;
//          req_missing_type = {
//            url: '/',
//            body: {
//              lti_message_type: '',
//              lti_version: 'LTI-1p0',
//              resource_link_id: 'http://link-to-resource.com/resource'
//            }
//          };
//          return _this.provider.valid_request(req_missing_type, function(err, valid) {
//            err.should.not.equal(null);
//            err.should.be["instanceof"](lti.Errors.ParameterError);
//            valid.should.equal(false);
//            return done();
//          });
//        });
//        it('should return false if incorrect LTI version', function(done) {
//          var req_wrong_version;
//          req_wrong_version = {
//            url: '/',
//            body: {
//              lti_message_type: 'basic-lti-launch-request',
//              lti_version: 'LTI-0p0',
//              resource_link_id: 'http://link-to-resource.com/resource'
//            }
//          };
//          return _this.provider.valid_request(req_wrong_version, function(err, valid) {
//            err.should.not.equal(null);
//            err.should.be["instanceof"](lti.Errors.ParameterError);
//            valid.should.equal(false);
//            return done();
//          });
//        });
//        it('should return false if no resource_link_id', function(done) {
//          var req_no_resource_link;
//          req_no_resource_link = {
//            url: '/',
//            body: {
//              lti_message_type: 'basic-lti-launch-request',
//              lti_version: 'LTI-1p0'
//            }
//          };
//          return _this.provider.valid_request(req_no_resource_link, function(err, valid) {
//            err.should.not.equal(null);
//            err.should.be["instanceof"](lti.Errors.ParameterError);
//            valid.should.equal(false);
//            return done();
//          });
//        });
//        it('should return false if bad oauth', function(done) {
//          var req, signature;
//          req = {
//            url: '/test',
//            method: 'POST',
//            connection: {
//              encrypted: void 0
//            },
//            headers: {
//              host: 'localhost'
//            },
//            body: {
//              lti_message_type: 'basic-lti-launch-request',
//              lti_version: 'LTI-1p0',
//              resource_link_id: 'http://link-to-resource.com/resource',
//              oauth_customer_key: 'key',
//              oauth_signature_method: 'HMAC-SHA1',
//              oauth_timestamp: Math.round(Date.now() / 1000),
//              oauth_nonce: Date.now() + Math.random() * 100
//            }
//          };
//          signature = _this.provider.signer.build_signature(req, 'secret');
//          req.body.oauth_signature = signature;
//          req.body.oauth_signature += "garbage";
//          return _this.provider.valid_request(req, function(err, valid) {
//            err.should.not.equal(null);
//            err.should.be["instanceof"](lti.Errors.SignatureError);
//            valid.should.equal(false);
//            return done();
//          });
//        });
//        it('should return true if good headers and oauth', function(done) {
//          var req, signature;
//          req = {
//            url: '/test',
//            method: 'POST',
//            connection: {
//              encrypted: void 0
//            },
//            headers: {
//              host: 'localhost'
//            },
//            body: {
//              lti_message_type: 'basic-lti-launch-request',
//              lti_version: 'LTI-1p0',
//              resource_link_id: 'http://link-to-resource.com/resource',
//              oauth_customer_key: 'key',
//              oauth_signature_method: 'HMAC-SHA1',
//              oauth_timestamp: Math.round(Date.now() / 1000),
//              oauth_nonce: Date.now() + Math.random() * 100
//            }
//          };
//          signature = _this.provider.signer.build_signature(req, req.body, 'secret');
//          req.body.oauth_signature = signature;
//          return _this.provider.valid_request(req, function(err, valid) {
//            should.not.exist(err);
//            valid.should.equal(true);
//            return done();
//          });
//        });
//        it('should special case and deduplicate Canvas requests', function(done) {
//          var req, signature;
//          req = {
//            url: '/test?test=x&test2=y&test2=z',
//            method: 'POST',
//            connection: {
//              encrypted: void 0
//            },
//            headers: {
//              host: 'localhost'
//            },
//            body: {
//              lti_message_type: 'basic-lti-launch-request',
//              lti_version: 'LTI-1p0',
//              resource_link_id: 'http://link-to-resource.com/resource',
//              oauth_customer_key: 'key',
//              oauth_signature_method: 'HMAC-SHA1',
//              oauth_timestamp: Math.round(Date.now() / 1000),
//              oauth_nonce: Date.now() + Math.random() * 100,
//              test: 'x',
//              test2: ['y', 'z'],
//              tool_consumer_info_product_family_code: 'canvas'
//            },
//            query: {
//              test: 'x',
//              test2: ['z', 'y']
//            }
//          };
//          signature = _this.provider.signer.build_signature(req, req.body, 'secret');
//          req.body.oauth_signature = signature;
//          return _this.provider.valid_request(req, function(err, valid) {
//            should.not.exist(err);
//            valid.should.equal(true);
//            return done();
//          });
//        });
//        it('should succeed with a hapi style req object', function(done) {
//          var expressReq, hapiReq, nonce, signature, timestamp;
//          timestamp = Math.round(Date.now() / 1000);
//          nonce = Date.now() + Math.random() * 100;
//          expressReq = {
//            url: '/test',
//            method: 'POST',
//            connection: {
//              encrypted: void 0
//            },
//            headers: {
//              host: 'localhost'
//            },
//            body: {
//              lti_message_type: 'basic-lti-launch-request',
//              lti_version: 'LTI-1p0',
//              resource_link_id: 'http://link-to-resource.com/resource',
//              oauth_customer_key: 'key',
//              oauth_signature_method: 'HMAC-SHA1',
//              oauth_timestamp: timestamp,
//              oauth_nonce: nonce
//            }
//          };
//          signature = _this.provider.signer.build_signature(expressReq, expressReq.body, 'secret');
//          hapiReq = {
//            raw: {
//              req: {
//                url: '/test',
//                method: 'POST',
//                connection: {
//                  encrypted: void 0
//                },
//                headers: {
//                  host: 'localhost'
//                }
//              }
//            },
//            payload: {
//              lti_message_type: 'basic-lti-launch-request',
//              lti_version: 'LTI-1p0',
//              resource_link_id: 'http://link-to-resource.com/resource',
//              oauth_customer_key: 'key',
//              oauth_signature_method: 'HMAC-SHA1',
//              oauth_timestamp: timestamp,
//              oauth_nonce: nonce,
//              oauth_signature: signature
//            }
//          };
//          return _this.provider.valid_request(hapiReq, function(err, valid) {
//            should.not.exist(err);
//            valid.should.equal(true);
//            return done();
//          });
//        });
//        return it('should return false if nonce already seen', function(done) {
//          var req, signature;
//          req = {
//            url: '/test',
//            method: 'POST',
//            connection: {
//              encrypted: void 0
//            },
//            headers: {
//              host: 'localhost'
//            },
//            body: {
//              lti_message_type: 'basic-lti-launch-request',
//              lti_version: 'LTI-1p0',
//              resource_link_id: 'http://link-to-resource.com/resource',
//              oauth_customer_key: 'key',
//              oauth_signature_method: 'HMAC-SHA1',
//              oauth_timestamp: Math.round(Date.now() / 1000),
//              oauth_nonce: Date.now() + Math.random() * 100
//            }
//          };
//          signature = _this.provider.signer.build_signature(req, req.body, 'secret');
//          req.body.oauth_signature = signature;
//          return _this.provider.valid_request(req, function(err, valid) {
//            should.not.exist(err);
//            valid.should.equal(true);
//            return _this.provider.valid_request(req, function(err, valid) {
//              should.exist(err);
//              err.should.be["instanceof"](lti.Errors.NonceError);
//              valid.should.equal(false);
//              return done();
//            });
//          });
//        });
//      };
//    })(this));
//    return describe('mapping', (function(_this) {
//      return function() {
//        before(function() {
//          var req;
//          _this.provider = new _this.lti.Provider('key', 'secret');
//          req = {
//            url: '/test',
//            method: 'POST',
//            connection: {
//              encrypted: void 0
//            },
//            headers: {
//              host: 'localhost'
//            },
//            body: {
//              context_id: "4",
//              context_label: "PHYS 2112",
//              context_title: "Introduction To Physics",
//              custom_param: "23",
//              ext_lms: "moodle-2",
//              ext_submit: "Press to launch this activity",
//              launch_presentation_locale: "en",
//              launch_presentation_return_url: "http://localhost:8888/moodle25/mod/lti/return.php?course=4&launch_container=4&instanceid=1",
//              lis_outcome_service_url: "http://localhost:8888/moodle25/mod/lti/service.php",
//              lis_person_contact_email_primary: "james@courseshark.com",
//              lis_person_name_family: "Rundquist",
//              lis_person_name_full: "James Rundquist",
//              lis_person_name_given: "James",
//              lis_result_sourcedid: "{\"data\":{\"instanceid\":\"1\",\"userid\":\"4\",\"launchid\":1480927086},\"hash\":\"03382572ba1bf35bcd99f9a9cbd44004c8f96f89c96d160a7b779a4ef89c70d5\"}",
//              lti_message_type: "basic-lti-launch-request",
//              lti_version: "LTI-1p0",
//              oauth_callback: "about:blank",
//              oauth_consumer_key: "moodle",
//              oauth_nonce: Date.now() + Math.random() * 100,
//              oauth_signature_method: "HMAC-SHA1",
//              oauth_timestamp: Math.round(Date.now() / 1000),
//              oauth_version: "1.0",
//              resource_link_description: "<p>A test of the student's wits </p>",
//              resource_link_id: "1",
//              resource_link_title: "Fun LTI example!",
//              roles: "Learner",
//              role_scope_mentor: "1234,5678,12%2C34",
//              tool_consumer_info_product_family_code: "moodle",
//              tool_consumer_info_version: "2013051400",
//              tool_consumer_instance_guid: "localhost",
//              user_id: "4"
//            }
//          };
//          req.body.oauth_signature = _this.provider.signer.build_signature(req, 'secret');
//          return _this.provider.parse_request(req);
//        });
//        it('should create a filled @body', function() {
//          should.exist(_this.provider.body);
//          _this.provider.body.should.have.property('context_id');
//          _this.provider.body.should.have.property('context_label');
//          _this.provider.body.should.have.property('context_title');
//          _this.provider.body.should.have.property('custom_param');
//          _this.provider.body.should.have.property('ext_lms');
//          _this.provider.body.should.have.property('ext_submit');
//          _this.provider.body.should.have.property('launch_presentation_locale');
//          _this.provider.body.should.have.property('launch_presentation_return_url');
//          _this.provider.body.should.have.property('lis_outcome_service_url');
//          _this.provider.body.should.have.property('lis_person_contact_email_primary');
//          _this.provider.body.should.have.property('lis_person_name_family');
//          _this.provider.body.should.have.property('lis_person_name_full');
//          _this.provider.body.should.have.property('lis_person_name_given');
//          _this.provider.body.should.have.property('lis_result_sourcedid');
//          _this.provider.body.should.have.property('lti_message_type');
//          _this.provider.body.should.have.property('lti_version');
//          _this.provider.body.should.have.property('resource_link_description');
//          _this.provider.body.should.have.property('resource_link_id');
//          _this.provider.body.should.have.property('resource_link_title');
//          _this.provider.body.should.have.property('roles');
//          _this.provider.body.should.have.property('role_scope_mentor');
//          _this.provider.body.should.have.property('tool_consumer_info_product_family_code');
//          _this.provider.body.should.have.property('tool_consumer_info_version');
//          _this.provider.body.should.have.property('tool_consumer_instance_guid');
//          return _this.provider.body.should.have.property('user_id');
//        });
//        it('should have stripped oauth_ properties', function() {
//          _this.provider.body.should.not.have.property('oauth_callback');
//          _this.provider.body.should.not.have.property('oauth_consumer_key');
//          _this.provider.body.should.not.have.property('oauth_nonce');
//          _this.provider.body.should.not.have.property('oauth_signature');
//          _this.provider.body.should.not.have.property('oauth_signature_method');
//          _this.provider.body.should.not.have.property('oauth_timestamp');
//          return _this.provider.body.should.not.have.property('oauth_version');
//        });
//        it('should have helper booleans for roles', function() {
//          _this.provider.student.should.equal(true);
//          _this.provider.instructor.should.equal(false);
//          _this.provider.content_developer.should.equal(false);
//          _this.provider.member.should.equal(false);
//          _this.provider.manager.should.equal(false);
//          _this.provider.mentor.should.equal(false);
//          _this.provider.admin.should.equal(false);
//          return _this.provider.ta.should.equal(false);
//        });
//        it('should have username accessor', function() {
//          return _this.provider.username.should.equal("James");
//        });
//        it('should have user id accessor', function() {
//          return _this.provider.userId.should.equal("4");
//        });
//        it('should handle the role_scope_mentor id array', function() {
//          return _this.provider.mentor_user_ids.should.eql(['1234', '5678', '12,34']);
//        });
//        it('should have context accessors', function() {
//          _this.provider.context_id.should.equal("4");
//          _this.provider.context_label.should.equal("PHYS 2112");
//          return _this.provider.context_title.should.equal("Introduction To Physics");
//        });
//        it('should have response outcome_service object', function() {
//          return _this.provider.outcome_service.should.exist;
//        });
//        it('should account for the standardized urn prefix', function() {
//          var provider;
//          provider = new _this.lti.Provider('key', 'secret');
//          provider.parse_request({
//            body: {
//              roles: 'urn:lti:role:ims/lis/Instructor'
//            }
//          });
//          return provider.instructor.should.equal(true);
//        });
//        it('should test for multiple roles being passed into the body', function() {
//          var provider;
//          provider = new _this.lti.Provider('key', 'secret');
//          return provider.parse_request({
//            body: {
//              roles: 'Instructor,Administrator'
//            }
//          });
//        });
//        it('should handle different role types from the specification', function() {
//          var provider;
//          provider = new _this.lti.Provider('key', 'secret');
//          provider.parse_request({
//            body: {
//              roles: 'urn:lti:role:ims/lis/Student,urn:lti:sysrole:ims/lis/Administrator,urn:lti:instrole:ims/lis/Alumni'
//            }
//          });
//          provider.student.should.equal(true);
//          provider.admin.should.equal(true);
//          return provider.alumni.should.equal(true);
//        });
//        return it('should handle garbage roles that do not match the specification', function() {
//          var provider;
//          provider = new _this.lti.Provider('key', 'secret');
//          provider.parse_request({
//            body: {
//              roles: 'urn:lti::ims/lis/Student,urn:lti:sysrole:ims/lis/Administrator/,/Alumni'
//            }
//          });
//          provider.student.should.equal(false);
//          provider.admin.should.equal(false);
//          return provider.alumni.should.equal(false);
//        });
//      };
//    })(this));
//  });
//
//}).call(this);
